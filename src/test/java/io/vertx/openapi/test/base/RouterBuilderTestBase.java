package io.vertx.openapi.test.base;

import io.vertx.core.Future;
import io.vertx.core.json.JsonObject;
import io.vertx.openapi.contract.OpenAPIContract;
import io.vertx.openapi.router.RouterBuilder;

import java.nio.file.Path;
import java.util.function.Function;

public class RouterBuilderTestBase extends HttpServerTestBase {
  /**
   * Creates a HTTPServer based on the passed RouterBuilder.
   * <p></p>
   * <b>Note:</b> This method should only be called once during a test.
   *
   * @param pathToContract      Path to the related OpenAPI contract
   * @param modifyRouterBuilder Function that allows to modify the RouterBuilder generated by the OpenAPI contract.
   * @return A Future which is succeeded when the server is started and failed if something went wrong.
   */
  protected Future<Void> createServer(Path pathToContract,
    Function<RouterBuilder, Future<RouterBuilder>> modifyRouterBuilder) {
    JsonObject unresolvedContract = vertx.fileSystem().readFileBlocking(pathToContract.toString()).toJsonObject();

    return OpenAPIContract.from(vertx, unresolvedContract)
      .map(contract -> RouterBuilder.create(vertx, contract))
      .compose(modifyRouterBuilder)
      .compose(rb -> super.createServer(rb.createRouter()));
  }
}
